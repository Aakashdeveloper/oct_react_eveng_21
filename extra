install >> https://code.visualstudio.com/download
install >> https://nodejs.org/en/
create account >> https://github.com/
install >> https://git-scm.com/downloads
bookmark >> https://github.com/Aakashdeveloper/oct_react_eveng_21 

//extensions
tabnine
vscode-icons
git history
git  lens
eslint


Npm
React = 3
Mock API
json-server
Github
Deployment
-> MERN
-> heroku
-> Aws
-> Docker
-> Nginx
React-JWT(Login Logout)-2
React_hooks -1
React-GraphQL-1
HOC
Basic React Native=1
React-Redux =1
React-Redux =1
///////Walkthrough///////
React-Saga -1
React-with-typescript-1
Testing Jest Enzime
--------NOT Backend--------------
API
GraphQL
Login/Logout


//////////////
React

React is frontend framework/lib that help to build single page
application using component base structure

SPA> single page application
> open source

npm > node package manager
json > javascript object notation
[
    {
        "id":1,
        "name":"John"
    },
    {
        "id":2,
        "name":"Aman",
        "city":"Amsterdam
    }
]

///////////
package.json
/////////
> This is the entry point to the application
> script => start, build ,test
> Meta => Name, version, description, author
> packages use for app


///////////
step to generate package.json
///////////
** NodeJs Must be install in system
> open cmd/terminal go inside the folder(cd)
> npm init
> answer all questions
> type "yes"

///////////
step to install package
///////////
** NodeJs Must be install in system
> open cmd/terminal go inside the folder(cd)
> npm i packagename


///////////
Step to generate react application
//////////
#window
>>>>One Time in New Laptop<<<<<<
> open cmd as administrator
> npm i -g create-react-app
> close cmd

>>>>>Next Every Time You want new app<<<<<<
> open new cmd
> go inside the folder where you want to generate
> create-react-app appname
--------------------------------------------

#mac/linux
>>>>One Time in New Laptop<<<<<<
> open terminal
> sudo npm i -g create-react-app
> close terminal

>>>>>Next Every Time You want new app<<<<<<
> open new terminal
> go inside the folder where you want to generate
> create-react-app appname
---------------------------------

#office
>>>>>Every Time You want new app<<<<<<
> open new cmd/terminal
> go inside the folder where you want to generate
> npx create-react-app appname


///////////
Step to run react app
//////////
> open cmd/terminal
> go inside the folder where you want to generate
> npm start
> localhost:3000
///////////

> React >> this is the main package for the app
> react-dom >> This help us to render the content
> react-script >> this help to compile and run the app

/////////
function add(a,b){
    var out = [a,b]
    return out
}

add(1,2)

>[1,2]

////////////////////////////////
Block Level > Always start from new line
inline > start in same line

///////////
inline > css in the html tag
styletag > css in the head of page
stylesheet > separate Css

inline > styletag > sheetsheet

inline{
    color:red;
    font-size:30px
}

styletag{
    color:orange;
    text-align:center
}

sheetsheet{
    color:green;
    text-align:right;
    border-color:green
}

{
    color:red;
    font-size:30px;
    text-align:center;
    border-color:green;
}

//////////////////////
tagName > h1 p a
id # > when we have target unique
className . > when we have target common

//////
bootstrap3

xs < 768
sm > 768
md > 992
lg > 1200

12/6 = 2
12/4 = 3

bootstrap4
col- <576px
sm > 576px
md > 768
lg > 992
xl > 1200


bootstrap5
col- <576px
sm > 576px
md > 768
lg > 992
xl > 1200
xxl > 1400

//////////////////////
functional
> Dumb component
> Display Purpose
> We cannot maintain state

class
> Logical Component
> Api calling, data manage, logics as well as display
> we can maintain state

//////////////////////
state
> State Act like a local variable
> every component can have its own state
> state are mutable
> any data interaction wil happen through state only

props
> help to transfer data from one component to another
> value of props cannot be updated
> data can only be pass in nested components



//////Javascript///////
map
filter
indexof

var city = ['Delhi', 'Mumbai', 'Pune', 'Amsterdam', 'London', 'Dubai']
city.map((data)=>{return `hi form ${data}`})
(6)Â ['hi form Delhi', 'hi form Mumbai', 'hi form Pune', 'hi form Amsterdam', 'hi form London', 'hi form Dubai']

//es5
var a = 10
var b = "my age is "+a
"my age is 10"

//es6
var a = 10
var b = `my age is ${a}`
"my age is 10"



////
parent to child >>> props
child to parent >>>> props with function

function add(a,b){
    return a+b
}

add(1,2)

in parent we define the function
in child we will call the function

//////////
var a = [5,4,8,2,9,4,6,3,4]
a.filter((data) => { return data>5})
[8, 9, 6]


var city = ["Delhi","London","Boston","Pune"]
city.indexOf("Delhi")
0
city.indexOf("Boston")
2
city.indexOf("Amsterdam")
2
city.indexOf("Mumbai")
-1


var a = 10;

a>10 ? "Hii":"Bie"
'Bie'

a==10 ? "Hii":"Bie"
'Hii'

///////////
params > / 
> param is compulsory 
> need to define in the route

queryParams > ?
> optional
> no need to define

/////Default Props/////
history > Redirection
location > Query
match > Params

(get) restaurants>         https://zomatoajulypi.herokuapp.com/restaurants
(get) restwrtcity >        https://zomatoajulypi.herokuapp.com/restaurant?stateId=1
(get) hoteldetails >       http://zomatoajulypi.herokuapp.com/details/1
(get) quickSearch>         https://zomatoajulypi.herokuapp.com/quicksearch
(get) onbasisofMeal >      https://zomatoajulypi.herokuapp.com/restaurant?mealtype_id=

(get) cuisinefilter >      https://zomatoajulypi.herokuapp.com/filter/4?cuisine=1

(get) costfilter >         https://zomatoajulypi.herokuapp.com/filter/1?hcost=1000&lcost=500

(get) cityname >           https://zomatoajulypi.herokuapp.com/location
(get) menu >               https://zomatoajulypi.herokuapp.com/menu/1

(post) orderspage >        http://zomatoajulypi.herokuapp.com/menuItem
                           body [1,4,5]
(get) allorder>            
(post)placeOrder >         
